{"mappings":"gfAAAA,EAAA,S,iBAGMC,EAASC,SAASC,cAAc,SACtCC,QAAQC,IAAIJ,EAAOK,UAEnB,IAAIC,EAAkB,EAClBC,EAAiB,EACjBC,EAAmB,EA+BvB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YAEpBA,MAtCPX,EAAOkB,iBAAiB,UACxB,SAAkBC,GAChBA,EAAEC,iBACF,IAEmBC,EAAfF,EAAEG,cADJjB,SAAYkB,EAAKF,EAALV,MAAOa,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OAO3B,GAJAnB,EAAkBoB,OAAOH,EAAMI,OAC/BpB,EAAiBmB,OAAOF,EAAKG,OAC7BnB,EAAmBkB,OAAOD,EAAOE,OAE7BrB,GAAmB,EACrB,OAGF,IAAK,IAAIsB,EAAI,EAAGA,GAAKpB,EAAkBoB,GAAK,EAC1CnB,EAAcmB,EAAGtB,GACduB,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBoB,EAAAC,OAAOC,QAAQ,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,UAE9DwB,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBoB,EAAAC,OAAOI,QAAQ,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,UAG9DL,GAAmBC,EAErBY,EAAEG,cAAce,W","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\nconsole.dir(formEl.elements);\n\nlet inputDelayValue = 0;\nlet inputStepValue = 0;\nlet inputAmountValue = 0;\n\nformEl.addEventListener('submit', onSubmit);\nfunction onSubmit(e) {\n  e.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  inputDelayValue = Number(delay.value);\n  inputStepValue = Number(step.value);\n  inputAmountValue = Number(amount.value);\n\n  if (inputDelayValue <= 0) {\n    return;\n  }\n\n  for (let i = 1; i <= inputAmountValue; i += 1) {\n    createPromise(i, inputDelayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    inputDelayValue += inputStepValue;\n  }\n  e.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","console","dir","elements","$ce04d3a99e08e73b$var$inputDelayValue","$ce04d3a99e08e73b$var$inputStepValue","$ce04d3a99e08e73b$var$inputAmountValue","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","_elements","currentTarget","delay1","step","amount","Number","value","i","then","param","$h6c0i","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.7e33a616.js.map"}